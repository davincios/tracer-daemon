use lazy_static::lazy_static;

use crate::config_manager::target_process::{
    target_matching::{CommandContainsStruct, TargetMatch},
    DisplayName,
};

use super::Target;

lazy_static! {


pub static ref OPT_CONDA_BIN_EXCEPTIONS : Vec<TargetMatch> = vec![
    // bash-equivalent executables
    TargetMatch::BinPathLastComponent("[".to_string()),
    TargetMatch::BinPathLastComponent("awk".to_string()),
    TargetMatch::BinPathLastComponent("tee".to_string()),
    TargetMatch::BinPathLastComponent("printf".to_string()),
    TargetMatch::BinPathLastComponent("basename".to_string()),
    TargetMatch::BinPathLastComponent("pwd".to_string()),
    TargetMatch::BinPathLastComponent("realpath".to_string()),
    TargetMatch::BinPathLastComponent("rm".to_string()),
    TargetMatch::BinPathLastComponent("rmdir".to_string()),
    TargetMatch::BinPathLastComponent("chown".to_string()),
    TargetMatch::BinPathLastComponent("chgrp".to_string()),
    TargetMatch::BinPathLastComponent("chmod".to_string()),
    TargetMatch::BinPathLastComponent("clear".to_string()),
    TargetMatch::BinPathLastComponent("cp".to_string()),
    TargetMatch::BinPathLastComponent("cut".to_string()),
    TargetMatch::BinPathLastComponent("date".to_string()),
    TargetMatch::BinPathLastComponent("df".to_string()),
    TargetMatch::BinPathLastComponent("dir".to_string()),
    TargetMatch::BinPathLastComponent("dd".to_string()),
    TargetMatch::BinPathLastComponent("kill".to_string()),
    TargetMatch::BinPathLastComponent("sort".to_string()),
    TargetMatch::BinPathLastComponent("echo".to_string()),
    TargetMatch::BinPathLastComponent("env".to_string()),
    TargetMatch::BinPathLastComponent("stat".to_string()),
    TargetMatch::BinPathLastComponent("expr".to_string()),
    TargetMatch::BinPathLastComponent("tail".to_string()),
    TargetMatch::BinPathLastComponent("head".to_string()),
    TargetMatch::BinPathLastComponent("false".to_string()),
    TargetMatch::BinPathLastComponent("true".to_string()),
    TargetMatch::BinPathLastComponent("truncate".to_string()),
    TargetMatch::BinPathLastComponent("touch".to_string()),
    TargetMatch::BinPathLastComponent("mv".to_string()),
    TargetMatch::BinPathLastComponent("uname".to_string()),
    TargetMatch::BinPathLastComponent("wc".to_string()),
    TargetMatch::BinPathLastComponent("whoami".to_string()),
    TargetMatch::BinPathLastComponent("who".to_string()),
    TargetMatch::BinPathLastComponent("yes".to_string()),
    TargetMatch::BinPathLastComponent("find".to_string()),
    TargetMatch::BinPathLastComponent("grep".to_string()),

    // other executables
    TargetMatch::BinPathLastComponent("2to3".to_string()),
    TargetMatch::BinPathLastComponent("2to3-3.12".to_string()),
    TargetMatch::BinPathLastComponent("acountry".to_string()),
    TargetMatch::BinPathLastComponent("activate".to_string()),
    TargetMatch::BinPathLastComponent("adig".to_string()),
    TargetMatch::BinPathLastComponent("aec".to_string()),
    TargetMatch::BinPathLastComponent("ahost".to_string()),
    TargetMatch::BinPathLastComponent("anaconda-navigator".to_string()),
    TargetMatch::BinPathLastComponent("anaconda-project".to_string()),
    TargetMatch::BinPathLastComponent("aomdec".to_string()),
    TargetMatch::BinPathLastComponent("aomenc".to_string()),
    TargetMatch::BinPathLastComponent("archspec".to_string()),
    TargetMatch::BinPathLastComponent("as".to_string()),
    TargetMatch::BinPathLastComponent("assistant".to_string()),
    TargetMatch::BinPathLastComponent("automat-visualize".to_string()),
    TargetMatch::BinPathLastComponent("autopep8".to_string()),
    TargetMatch::BinPathLastComponent("b2".to_string()),
    TargetMatch::BinPathLastComponent("balsam".to_string()),
    TargetMatch::BinPathLastComponent("bash".to_string()),
    TargetMatch::BinPathLastComponent("binstar".to_string()),
    TargetMatch::BinPathLastComponent("bjam".to_string()),
    TargetMatch::BinPathLastComponent("black".to_string()),
    TargetMatch::BinPathLastComponent("blackd".to_string()),
    TargetMatch::BinPathLastComponent("bokeh".to_string()),
    TargetMatch::BinPathLastComponent("brotli".to_string()),
    TargetMatch::BinPathLastComponent("bsdcat".to_string()),
    TargetMatch::BinPathLastComponent("bsdcpio".to_string()),
    TargetMatch::BinPathLastComponent("bsdtar".to_string()),
    TargetMatch::BinPathLastComponent("bunzip2".to_string()),
    TargetMatch::BinPathLastComponent("bzcat".to_string()),
    TargetMatch::BinPathLastComponent("bzcmp".to_string()),
    TargetMatch::BinPathLastComponent("bzdiff".to_string()),
    TargetMatch::BinPathLastComponent("bzegrep".to_string()),
    TargetMatch::BinPathLastComponent("bzfgrep".to_string()),
    TargetMatch::BinPathLastComponent("bzgrep".to_string()),
    TargetMatch::BinPathLastComponent("bzip2".to_string()),
    TargetMatch::BinPathLastComponent("bzip2recover".to_string()),
    TargetMatch::BinPathLastComponent("bzless".to_string()),
    TargetMatch::BinPathLastComponent("bzmore".to_string()),
    TargetMatch::BinPathLastComponent("canbusutil".to_string()),
    TargetMatch::BinPathLastComponent("cat".to_string()),
    TargetMatch::BinPathLastComponent("captoinfo".to_string()),
    TargetMatch::BinPathLastComponent("cbrunsli".to_string()),
    TargetMatch::BinPathLastComponent("certutil".to_string()),
    TargetMatch::BinPathLastComponent("cftp".to_string()),
    TargetMatch::BinPathLastComponent("chardetect".to_string()),
    TargetMatch::BinPathLastComponent("cjpeg".to_string()),
    TargetMatch::BinPathLastComponent("ckeygen".to_string()),
    TargetMatch::BinPathLastComponent("clear".to_string()),
    TargetMatch::BinPathLastComponent("compile_et".to_string()),
    TargetMatch::BinPathLastComponent("conch".to_string()),
    TargetMatch::BinPathLastComponent("conda".to_string()),
    TargetMatch::BinPathLastComponent("conda2solv".to_string()),
    TargetMatch::BinPathLastComponent("conda-build".to_string()),
    TargetMatch::BinPathLastComponent("conda-content-trust".to_string()),
    TargetMatch::BinPathLastComponent("conda-convert".to_string()),
    TargetMatch::BinPathLastComponent("conda-debug".to_string()),
    TargetMatch::BinPathLastComponent("conda-develop".to_string()),
    TargetMatch::BinPathLastComponent("conda-env".to_string()),
    TargetMatch::BinPathLastComponent("conda-inspect".to_string()),
    TargetMatch::BinPathLastComponent("conda-metapackage".to_string()),
    TargetMatch::BinPathLastComponent("conda-pack".to_string()),
    TargetMatch::BinPathLastComponent("conda-render".to_string()),
    TargetMatch::BinPathLastComponent("conda-repo".to_string()),
    TargetMatch::BinPathLastComponent("conda-server".to_string()),
    TargetMatch::BinPathLastComponent("conda-skeleton".to_string()),
    TargetMatch::BinPathLastComponent("conda-token".to_string()),
    TargetMatch::BinPathLastComponent("cookiecutter".to_string()),
    TargetMatch::BinPathLastComponent("cph".to_string()),
    TargetMatch::BinPathLastComponent("cpuinfo".to_string()),
    TargetMatch::BinPathLastComponent("c_rehash".to_string()),
    TargetMatch::BinPathLastComponent("csv-import".to_string()),
    TargetMatch::BinPathLastComponent("cups-config".to_string()),
    TargetMatch::BinPathLastComponent("curl".to_string()),
    TargetMatch::BinPathLastComponent("curl-config".to_string()),
    TargetMatch::BinPathLastComponent("curve_keygen".to_string()),
    TargetMatch::BinPathLastComponent("dask".to_string()),
    TargetMatch::BinPathLastComponent("dask-scheduler".to_string()),
    TargetMatch::BinPathLastComponent("dask-ssh".to_string()),
    TargetMatch::BinPathLastComponent("dask-worker".to_string()),
    TargetMatch::BinPathLastComponent("datashader".to_string()),
    TargetMatch::BinPathLastComponent("dav1d".to_string()),
    TargetMatch::BinPathLastComponent("dbrunsli".to_string()),
    TargetMatch::BinPathLastComponent("dbus-cleanup-sockets".to_string()),
    TargetMatch::BinPathLastComponent("dbus-daemon".to_string()),
    TargetMatch::BinPathLastComponent("dbus-launch".to_string()),
    TargetMatch::BinPathLastComponent("dbus-monitor".to_string()),
    TargetMatch::BinPathLastComponent("dbus-run-session".to_string()),
    TargetMatch::BinPathLastComponent("dbus-send".to_string()),
    TargetMatch::BinPathLastComponent("dbus-test-tool".to_string()),
    TargetMatch::BinPathLastComponent("dbus-update-activation-environment".to_string()),
    TargetMatch::BinPathLastComponent("dbus-uuidgen".to_string()),
    TargetMatch::BinPathLastComponent("deactivate".to_string()),
    TargetMatch::BinPathLastComponent("derb".to_string()),
    TargetMatch::BinPathLastComponent("designer".to_string()),
    TargetMatch::BinPathLastComponent("distro".to_string()),
    TargetMatch::BinPathLastComponent("dirname".to_string()),
    TargetMatch::BinPathLastComponent("dircolors".to_string()),
    TargetMatch::BinPathLastComponent("djpeg".to_string()),
    TargetMatch::BinPathLastComponent("dltest".to_string()),
    TargetMatch::BinPathLastComponent("dmypy".to_string()),
    TargetMatch::BinPathLastComponent("dotenv".to_string()),
    TargetMatch::BinPathLastComponent("dumpsolv".to_string()),
    TargetMatch::BinPathLastComponent("elasticurl".to_string()),
    TargetMatch::BinPathLastComponent("elastipubsub".to_string()),
    TargetMatch::BinPathLastComponent("epylint".to_string()),
    TargetMatch::BinPathLastComponent("f2py".to_string()),
    TargetMatch::BinPathLastComponent("fax2ps".to_string()),
    TargetMatch::BinPathLastComponent("fax2tiff".to_string()),
    TargetMatch::BinPathLastComponent("fc-cache".to_string()),
    TargetMatch::BinPathLastComponent("fc-cat".to_string()),
    TargetMatch::BinPathLastComponent("fc-conflist".to_string()),
    TargetMatch::BinPathLastComponent("fc-list".to_string()),
    TargetMatch::BinPathLastComponent("fc-match".to_string()),
    TargetMatch::BinPathLastComponent("fc-pattern".to_string()),
    TargetMatch::BinPathLastComponent("fc-query".to_string()),
    TargetMatch::BinPathLastComponent("fc-scan".to_string()),
    TargetMatch::BinPathLastComponent("fc-validate".to_string()),
    TargetMatch::BinPathLastComponent("fits2bitmap".to_string()),
    TargetMatch::BinPathLastComponent("fitscheck".to_string()),
    TargetMatch::BinPathLastComponent("fitscopy".to_string()),
    TargetMatch::BinPathLastComponent("fitsdiff".to_string()),
    TargetMatch::BinPathLastComponent("fitsheader".to_string()),
    TargetMatch::BinPathLastComponent("fitsinfo".to_string()),
    TargetMatch::BinPathLastComponent("fixqt4headers.pl".to_string()),
    TargetMatch::BinPathLastComponent("fonttools".to_string()),
    TargetMatch::BinPathLastComponent("fpack".to_string()),
    TargetMatch::BinPathLastComponent("freetype-config".to_string()),
    TargetMatch::BinPathLastComponent("funpack".to_string()),
    TargetMatch::BinPathLastComponent("gapplication".to_string()),
    TargetMatch::BinPathLastComponent("gdbus".to_string()),
    TargetMatch::BinPathLastComponent("gdbus-codegen".to_string()),
    TargetMatch::BinPathLastComponent("genbrk".to_string()),
    TargetMatch::BinPathLastComponent("gencfu".to_string()),
    TargetMatch::BinPathLastComponent("gencnval".to_string()),
    TargetMatch::BinPathLastComponent("gendict".to_string()),
    TargetMatch::BinPathLastComponent("genrb".to_string()),
    TargetMatch::BinPathLastComponent("get_gprof".to_string()),
    TargetMatch::BinPathLastComponent("get_objgraph".to_string()),
    TargetMatch::BinPathLastComponent("gflags_completions.sh".to_string()),
    TargetMatch::BinPathLastComponent("gif2h5".to_string()),
    TargetMatch::BinPathLastComponent("gif2rgb".to_string()),
    TargetMatch::BinPathLastComponent("gifbuild".to_string()),
    TargetMatch::BinPathLastComponent("gifclrmp".to_string()),
    TargetMatch::BinPathLastComponent("giffix".to_string()),
    TargetMatch::BinPathLastComponent("giftext".to_string()),
    TargetMatch::BinPathLastComponent("giftool".to_string()),
    TargetMatch::BinPathLastComponent("git".to_string()),
    TargetMatch::BinPathLastComponent("gio".to_string()),
    TargetMatch::BinPathLastComponent("gio-querymodules".to_string()),
    TargetMatch::BinPathLastComponent("glib-compile-resources".to_string()),
    TargetMatch::BinPathLastComponent("glib-compile-schemas".to_string()),
    TargetMatch::BinPathLastComponent("glib-genmarshal".to_string()),
    TargetMatch::BinPathLastComponent("glib-gettextize".to_string()),
    TargetMatch::BinPathLastComponent("glib-mkenums".to_string()),
    TargetMatch::BinPathLastComponent("gobject-query".to_string()),
    TargetMatch::BinPathLastComponent("gresource".to_string()),
    TargetMatch::BinPathLastComponent("grpc_cpp_plugin".to_string()),
    TargetMatch::BinPathLastComponent("grpc_csharp_plugin".to_string()),
    TargetMatch::BinPathLastComponent("grpc_node_plugin".to_string()),
    TargetMatch::BinPathLastComponent("grpc_objective_c_plugin".to_string()),
    TargetMatch::BinPathLastComponent("grpc_php_plugin".to_string()),
    TargetMatch::BinPathLastComponent("grpc_python_plugin".to_string()),
    TargetMatch::BinPathLastComponent("grpc_ruby_plugin".to_string()),
    TargetMatch::BinPathLastComponent("gsettings".to_string()),
    TargetMatch::BinPathLastComponent("gss-client".to_string()),
    TargetMatch::BinPathLastComponent("gst-device-monitor-1.0".to_string()),
    TargetMatch::BinPathLastComponent("gst-discoverer-1.0".to_string()),
    TargetMatch::BinPathLastComponent("gst-inspect-1.0".to_string()),
    TargetMatch::BinPathLastComponent("gst-launch-1.0".to_string()),
    TargetMatch::BinPathLastComponent("gst-play-1.0".to_string()),
    TargetMatch::BinPathLastComponent("gst-stats-1.0".to_string()),
    TargetMatch::BinPathLastComponent("gst-typefind-1.0".to_string()),
    TargetMatch::BinPathLastComponent("gtester".to_string()),
    TargetMatch::BinPathLastComponent("gtester-report".to_string()),
    TargetMatch::BinPathLastComponent("h52gif".to_string()),
    TargetMatch::BinPathLastComponent("h5c++".to_string()),
    TargetMatch::BinPathLastComponent("h5cc".to_string()),
    TargetMatch::BinPathLastComponent("h5clear".to_string()),
    TargetMatch::BinPathLastComponent("h5copy".to_string()),
    TargetMatch::BinPathLastComponent("h5debug".to_string()),
    TargetMatch::BinPathLastComponent("h5diff".to_string()),
    TargetMatch::BinPathLastComponent("h5dump".to_string()),
    TargetMatch::BinPathLastComponent("h5fc".to_string()),
    TargetMatch::BinPathLastComponent("h5format_convert".to_string()),
    TargetMatch::BinPathLastComponent("h5import".to_string()),
    TargetMatch::BinPathLastComponent("h5jam".to_string()),
    TargetMatch::BinPathLastComponent("h5ls".to_string()),
    TargetMatch::BinPathLastComponent("h5mkgrp".to_string()),
    TargetMatch::BinPathLastComponent("h5perf_serial".to_string()),
    TargetMatch::BinPathLastComponent("h5redeploy".to_string()),
    TargetMatch::BinPathLastComponent("h5repack".to_string()),
    TargetMatch::BinPathLastComponent("h5repart".to_string()),
    TargetMatch::BinPathLastComponent("h5stat".to_string()),
    TargetMatch::BinPathLastComponent("h5unjam".to_string()),
    TargetMatch::BinPathLastComponent("h5watch".to_string()),
    TargetMatch::BinPathLastComponent("holoviews".to_string()),
    TargetMatch::BinPathLastComponent("iconv".to_string()),
    TargetMatch::BinPathLastComponent("icu-config".to_string()),
    TargetMatch::BinPathLastComponent("icuexportdata".to_string()),
    TargetMatch::BinPathLastComponent("icuinfo".to_string()),
    TargetMatch::BinPathLastComponent("idle3".to_string()),
    TargetMatch::BinPathLastComponent("idle3.12".to_string()),
    TargetMatch::BinPathLastComponent("imagecodecs".to_string()),
    TargetMatch::BinPathLastComponent("imageio_download_bin".to_string()),
    TargetMatch::BinPathLastComponent("imageio_remove_bin".to_string()),
    TargetMatch::BinPathLastComponent("infocmp".to_string()),
    TargetMatch::BinPathLastComponent("infotocap".to_string()),
    TargetMatch::BinPathLastComponent("innochecksum".to_string()),
    TargetMatch::BinPathLastComponent("installcheck".to_string()),
    TargetMatch::BinPathLastComponent("intake".to_string()),
    TargetMatch::BinPathLastComponent("intake-server".to_string()),
    TargetMatch::BinPathLastComponent("ippeveprinter".to_string()),
    TargetMatch::BinPathLastComponent("ipptool".to_string()),
    TargetMatch::BinPathLastComponent("isort".to_string()),
    TargetMatch::BinPathLastComponent("isort-identify-imports".to_string()),
    TargetMatch::BinPathLastComponent("isql".to_string()),
    TargetMatch::BinPathLastComponent("isympy".to_string()),
    TargetMatch::BinPathLastComponent("iusql".to_string()),
    TargetMatch::BinPathLastComponent("jlpm".to_string()),
    TargetMatch::BinPathLastComponent("jpegtran".to_string()),
    TargetMatch::BinPathLastComponent("jpgicc".to_string()),
    TargetMatch::BinPathLastComponent("jp.py".to_string()),
    TargetMatch::BinPathLastComponent("jq".to_string()),
    TargetMatch::BinPathLastComponent("jsondiff".to_string()),
    TargetMatch::BinPathLastComponent("jsonpatch".to_string()),
    TargetMatch::BinPathLastComponent("jsonpointer".to_string()),
    TargetMatch::BinPathLastComponent("jsonschema".to_string()),
    TargetMatch::BinPathLastComponent("jupyter-dejavu".to_string()),
    TargetMatch::BinPathLastComponent("jupyter-events".to_string()),
    TargetMatch::BinPathLastComponent("jupyter-execute".to_string()),
    TargetMatch::BinPathLastComponent("jupyter-kernel".to_string()),
    TargetMatch::BinPathLastComponent("jupyter-kernelspec".to_string()),
    TargetMatch::BinPathLastComponent("jupyter-lab".to_string()),
    TargetMatch::BinPathLastComponent("jupyter-labextension".to_string()),
    TargetMatch::BinPathLastComponent("jupyter-labhub".to_string()),
    TargetMatch::BinPathLastComponent("jupyter-migrate".to_string()),
    TargetMatch::BinPathLastComponent("jupyter-nbconvert".to_string()),
    TargetMatch::BinPathLastComponent("jupyter-qtconsole".to_string()),
    TargetMatch::BinPathLastComponent("jupyter-run".to_string()),
    TargetMatch::BinPathLastComponent("jupyter-troubleshoot".to_string()),
    TargetMatch::BinPathLastComponent("jupyter-trust".to_string()),
    TargetMatch::BinPathLastComponent("JxrDecApp".to_string()),
    TargetMatch::BinPathLastComponent("JxrEncApp".to_string()),
    TargetMatch::BinPathLastComponent("k5srvutil".to_string()),
    TargetMatch::BinPathLastComponent("kadmin".to_string()),
    TargetMatch::BinPathLastComponent("kdestroy".to_string()),
    TargetMatch::BinPathLastComponent("keyring".to_string()),
    TargetMatch::BinPathLastComponent("kinit".to_string()),
    TargetMatch::BinPathLastComponent("klist".to_string()),
    TargetMatch::BinPathLastComponent("kpasswd".to_string()),
    TargetMatch::BinPathLastComponent("krb5-config".to_string()),
    TargetMatch::BinPathLastComponent("ksu".to_string()),
    TargetMatch::BinPathLastComponent("kswitch".to_string()),
    TargetMatch::BinPathLastComponent("ktutil".to_string()),
    TargetMatch::BinPathLastComponent("kvno".to_string()),
    TargetMatch::BinPathLastComponent("lconvert".to_string()),
    TargetMatch::BinPathLastComponent("ld".to_string()),
    TargetMatch::BinPathLastComponent("libdeflate-gunzip".to_string()),
    TargetMatch::BinPathLastComponent("libdeflate-gzip".to_string()),
    TargetMatch::BinPathLastComponent("libpng16-config".to_string()),
    TargetMatch::BinPathLastComponent("libpng-config".to_string()),
    TargetMatch::BinPathLastComponent("linguist".to_string()),
    TargetMatch::BinPathLastComponent("linkicc".to_string()),
    TargetMatch::BinPathLastComponent("lprodump".to_string()),
    TargetMatch::BinPathLastComponent("lrelease".to_string()),
    TargetMatch::BinPathLastComponent("lrelease-pro".to_string()),
    TargetMatch::BinPathLastComponent("ls".to_string()),
    TargetMatch::BinPathLastComponent("lsm2bin".to_string()),
    TargetMatch::BinPathLastComponent("lupdate".to_string()),
    TargetMatch::BinPathLastComponent("lupdate-pro".to_string()),
    TargetMatch::BinPathLastComponent("lz4".to_string()),
    TargetMatch::BinPathLastComponent("lz4c".to_string()),
    TargetMatch::BinPathLastComponent("lz4cat".to_string()),
    TargetMatch::BinPathLastComponent("lz4_decompress".to_string()),
    TargetMatch::BinPathLastComponent("lzcat".to_string()),
    TargetMatch::BinPathLastComponent("lzcmp".to_string()),
    TargetMatch::BinPathLastComponent("lzdiff".to_string()),
    TargetMatch::BinPathLastComponent("lzegrep".to_string()),
    TargetMatch::BinPathLastComponent("lzfgrep".to_string()),
    TargetMatch::BinPathLastComponent("lzgrep".to_string()),
    TargetMatch::BinPathLastComponent("lzless".to_string()),
    TargetMatch::BinPathLastComponent("lzma".to_string()),
    TargetMatch::BinPathLastComponent("lzmadec".to_string()),
    TargetMatch::BinPathLastComponent("lzmainfo".to_string()),
    TargetMatch::BinPathLastComponent("lzmore".to_string()),
    TargetMatch::BinPathLastComponent("mailmail".to_string()),
    TargetMatch::BinPathLastComponent("make".to_string()),
    TargetMatch::BinPathLastComponent("makeconv".to_string()),
    TargetMatch::BinPathLastComponent("mamba-package".to_string()),
    TargetMatch::BinPathLastComponent("markdown-it".to_string()),
    TargetMatch::BinPathLastComponent("markdown_py".to_string()),
    TargetMatch::BinPathLastComponent("matplotlib".to_string()),
    TargetMatch::BinPathLastComponent("mergesolv".to_string()),
    TargetMatch::BinPathLastComponent("meshdebug".to_string()),
    TargetMatch::BinPathLastComponent("mirror_server".to_string()),
    TargetMatch::BinPathLastComponent("mirror_server_stop".to_string()),
    TargetMatch::BinPathLastComponent("moc".to_string()),
    TargetMatch::BinPathLastComponent("myisamchk".to_string()),
    TargetMatch::BinPathLastComponent("myisam_ftdump".to_string()),
    TargetMatch::BinPathLastComponent("myisamlog".to_string()),
    TargetMatch::BinPathLastComponent("myisampack".to_string()),
    TargetMatch::BinPathLastComponent("my_print_defaults".to_string()),
    TargetMatch::BinPathLastComponent("mypy".to_string()),
    TargetMatch::BinPathLastComponent("mypyc".to_string()),
    TargetMatch::BinPathLastComponent("mysqladmin".to_string()),
    TargetMatch::BinPathLastComponent("mysqlbinlog".to_string()),
    TargetMatch::BinPathLastComponent("mysqlcheck".to_string()),
    TargetMatch::BinPathLastComponent("mysql_client_test".to_string()),
    TargetMatch::BinPathLastComponent("mysql_client_test_embedded".to_string()),
    TargetMatch::BinPathLastComponent("mysql_config".to_string()),
    TargetMatch::BinPathLastComponent("mysql_config_editor".to_string()),
    TargetMatch::BinPathLastComponent("mysqld".to_string()),
    TargetMatch::BinPathLastComponent("mysqld_multi".to_string()),
    TargetMatch::BinPathLastComponent("mysqld_safe".to_string()),
    TargetMatch::BinPathLastComponent("mysqldump".to_string()),
    TargetMatch::BinPathLastComponent("mysqldumpslow".to_string()),
    TargetMatch::BinPathLastComponent("mysql_embedded".to_string()),
    TargetMatch::BinPathLastComponent("mysqlimport".to_string()),
    TargetMatch::BinPathLastComponent("mysql_install_db".to_string()),
    TargetMatch::BinPathLastComponent("mysql_plugin".to_string()),
    TargetMatch::BinPathLastComponent("mysqlpump".to_string()),
    TargetMatch::BinPathLastComponent("mysql_secure_installation".to_string()),
    TargetMatch::BinPathLastComponent("mysql.server".to_string()),
    TargetMatch::BinPathLastComponent("mysqlshow".to_string()),
    TargetMatch::BinPathLastComponent("mysqlslap".to_string()),
    TargetMatch::BinPathLastComponent("mysql_ssl_rsa_setup".to_string()),
    TargetMatch::BinPathLastComponent("mysqltest".to_string()),
    TargetMatch::BinPathLastComponent("mysqltest_embedded".to_string()),
    TargetMatch::BinPathLastComponent("mysql_tzinfo_to_sql".to_string()),
    TargetMatch::BinPathLastComponent("mysql_upgrade".to_string()),
    TargetMatch::BinPathLastComponent("mysqlxtest".to_string()),
    TargetMatch::BinPathLastComponent("navigator-updater".to_string()),
    TargetMatch::BinPathLastComponent("ncursesw6-config".to_string()),
    TargetMatch::BinPathLastComponent("nghttp".to_string()),
    TargetMatch::BinPathLastComponent("nghttpd".to_string()),
    TargetMatch::BinPathLastComponent("nghttpx".to_string()),
    TargetMatch::BinPathLastComponent("node".to_string()),
    TargetMatch::BinPathLastComponent("normalizer".to_string()),
    TargetMatch::BinPathLastComponent("nspr-config".to_string()),
    TargetMatch::BinPathLastComponent("nss-config".to_string()),
    TargetMatch::BinPathLastComponent("numba".to_string()),
    TargetMatch::BinPathLastComponent("odbc_config".to_string()),
    TargetMatch::BinPathLastComponent("odbcinst".to_string()),
    TargetMatch::BinPathLastComponent("onig-config".to_string()),
    TargetMatch::BinPathLastComponent("openssl".to_string()),
    TargetMatch::BinPathLastComponent("opj_compress".to_string()),
    TargetMatch::BinPathLastComponent("opj_decompress".to_string()),
    TargetMatch::BinPathLastComponent("opj_dump".to_string()),
    TargetMatch::BinPathLastComponent("orc-contents".to_string()),
    TargetMatch::BinPathLastComponent("orc-memory".to_string()),
    TargetMatch::BinPathLastComponent("orc-metadata".to_string()),
    TargetMatch::BinPathLastComponent("orc-scan".to_string()),
    TargetMatch::BinPathLastComponent("orc-statistics".to_string()),
    TargetMatch::BinPathLastComponent("pal2rgb".to_string()),
    TargetMatch::BinPathLastComponent("panel".to_string()),
    TargetMatch::BinPathLastComponent("patch".to_string()),
    TargetMatch::BinPathLastComponent("patchelf".to_string()),
    TargetMatch::BinPathLastComponent("pcre2-config".to_string()),
    TargetMatch::BinPathLastComponent("pcre2grep".to_string()),
    TargetMatch::BinPathLastComponent("pcre2_jit_test".to_string()),
    TargetMatch::BinPathLastComponent("pcre2posix_test".to_string()),
    TargetMatch::BinPathLastComponent("pcre2test".to_string()),
    TargetMatch::BinPathLastComponent("perror".to_string()),
    TargetMatch::BinPathLastComponent("pg_config".to_string()),
    TargetMatch::BinPathLastComponent("pip".to_string()),
    TargetMatch::BinPathLastComponent("pip3".to_string()),
    TargetMatch::BinPathLastComponent("pixeltool".to_string()),
    TargetMatch::BinPathLastComponent("pk12util".to_string()),
    TargetMatch::BinPathLastComponent("pkgdata".to_string()),
    TargetMatch::BinPathLastComponent("pkginfo".to_string()),
    TargetMatch::BinPathLastComponent("pngfix".to_string()),
    TargetMatch::BinPathLastComponent("png-fix-itxt".to_string()),
    TargetMatch::BinPathLastComponent("ppm2tiff".to_string()),
    TargetMatch::BinPathLastComponent("produce_x_platform_fuzz_corpus".to_string()),
    TargetMatch::BinPathLastComponent("protoc".to_string()),
    TargetMatch::BinPathLastComponent("psicc".to_string()),
    TargetMatch::BinPathLastComponent("pt2to3".to_string()),
    TargetMatch::BinPathLastComponent("ptdump".to_string()),
    TargetMatch::BinPathLastComponent("ptrepack".to_string()),
    TargetMatch::BinPathLastComponent("pttree".to_string()),
    TargetMatch::BinPathLastComponent("pybabel".to_string()),
    TargetMatch::BinPathLastComponent("pycodestyle".to_string()),
    TargetMatch::BinPathLastComponent("pyct".to_string()),
    TargetMatch::BinPathLastComponent("pydoc".to_string()),
    TargetMatch::BinPathLastComponent("pydoc3".to_string()),
    TargetMatch::BinPathLastComponent("pydoc3.12".to_string()),
    TargetMatch::BinPathLastComponent("pydocstyle".to_string()),
    TargetMatch::BinPathLastComponent("pyflakes".to_string()),
    TargetMatch::BinPathLastComponent("pyftmerge".to_string()),
    TargetMatch::BinPathLastComponent("pyftsubset".to_string()),
    TargetMatch::BinPathLastComponent("pyhtmlizer".to_string()),
    TargetMatch::BinPathLastComponent("pyjson5".to_string()),
    TargetMatch::BinPathLastComponent("pylint".to_string()),
    TargetMatch::BinPathLastComponent("pylint-config".to_string()),
    TargetMatch::BinPathLastComponent("pylsp".to_string()),
    TargetMatch::BinPathLastComponent("pylupdate5".to_string()),
    TargetMatch::BinPathLastComponent("pyrcc5".to_string()),
    TargetMatch::BinPathLastComponent("pyreverse".to_string()),
    TargetMatch::BinPathLastComponent("pysemver".to_string()),
    TargetMatch::BinPathLastComponent("py.test".to_string()),
    TargetMatch::BinPathLastComponent("pytest".to_string()),
    TargetMatch::BinPathLastComponent("python3.12-config".to_string()),
    TargetMatch::BinPathLastComponent("python3-config".to_string()),
    TargetMatch::BinPathLastComponent("pyuic5".to_string()),
    TargetMatch::BinPathLastComponent("qcollectiongenerator".to_string()),
    TargetMatch::BinPathLastComponent("qdarkstyle".to_string()),
    TargetMatch::BinPathLastComponent("qdarkstyle.example".to_string()),
    TargetMatch::BinPathLastComponent("qdarkstyle.utils".to_string()),
    TargetMatch::BinPathLastComponent("qdbus".to_string()),
    TargetMatch::BinPathLastComponent("qdbuscpp2xml".to_string()),
    TargetMatch::BinPathLastComponent("qdbusviewer".to_string()),
    TargetMatch::BinPathLastComponent("qdbusxml2cpp".to_string()),
    TargetMatch::BinPathLastComponent("qdistancefieldgenerator".to_string()),
    TargetMatch::BinPathLastComponent("qdoc".to_string()),
    TargetMatch::BinPathLastComponent("qgltf".to_string()),
    TargetMatch::BinPathLastComponent("qhelpgenerator".to_string()),
    TargetMatch::BinPathLastComponent("qlalr".to_string()),
    TargetMatch::BinPathLastComponent("qmake".to_string()),
    TargetMatch::BinPathLastComponent("qml".to_string()),
    TargetMatch::BinPathLastComponent("qmlcachegen".to_string()),
    TargetMatch::BinPathLastComponent("qmleasing".to_string()),
    TargetMatch::BinPathLastComponent("qmlformat".to_string()),
    TargetMatch::BinPathLastComponent("qmlimportscanner".to_string()),
    TargetMatch::BinPathLastComponent("qmllint".to_string()),
    TargetMatch::BinPathLastComponent("qmlmin".to_string()),
    TargetMatch::BinPathLastComponent("qmlplugindump".to_string()),
    TargetMatch::BinPathLastComponent("qmlpreview".to_string()),
    TargetMatch::BinPathLastComponent("qmlprofiler".to_string()),
    TargetMatch::BinPathLastComponent("qmlscene".to_string()),
    TargetMatch::BinPathLastComponent("qmltestrunner".to_string()),
    TargetMatch::BinPathLastComponent("qmltyperegistrar".to_string()),
    TargetMatch::BinPathLastComponent("qscxmlc".to_string()),
    TargetMatch::BinPathLastComponent("qta-browser".to_string()),
    TargetMatch::BinPathLastComponent("qtattributionsscanner".to_string()),
    TargetMatch::BinPathLastComponent("qt.conf".to_string()),
    TargetMatch::BinPathLastComponent("qtdiag".to_string()),
    TargetMatch::BinPathLastComponent("qtpaths".to_string()),
    TargetMatch::BinPathLastComponent("qtplugininfo".to_string()),
    TargetMatch::BinPathLastComponent("qtpy".to_string()),
    TargetMatch::BinPathLastComponent("qvkgen".to_string()),
    TargetMatch::BinPathLastComponent("qwebengine_convert_dict".to_string()),
    TargetMatch::BinPathLastComponent("raw2tiff".to_string()),
    TargetMatch::BinPathLastComponent("rcc".to_string()),
    TargetMatch::BinPathLastComponent("rdjpgcom".to_string()),
    TargetMatch::BinPathLastComponent("repc".to_string()),
    TargetMatch::BinPathLastComponent("replace".to_string()),
    TargetMatch::BinPathLastComponent("repo2solv".to_string()),
    TargetMatch::BinPathLastComponent("reset".to_string()),
    TargetMatch::BinPathLastComponent("resolveip".to_string()),
    TargetMatch::BinPathLastComponent("resolve_stack_dump".to_string()),
    TargetMatch::BinPathLastComponent("rm".to_string()),
    TargetMatch::BinPathLastComponent("rmdir".to_string()),
    TargetMatch::BinPathLastComponent("rst2html4.py".to_string()),
    TargetMatch::BinPathLastComponent("rst2html5.py".to_string()),
    TargetMatch::BinPathLastComponent("rst2html.py".to_string()),
    TargetMatch::BinPathLastComponent("rst2latex.py".to_string()),
    TargetMatch::BinPathLastComponent("rst2man.py".to_string()),
    TargetMatch::BinPathLastComponent("rst2odt_prepstyles.py".to_string()),
    TargetMatch::BinPathLastComponent("rst2odt.py".to_string()),
    TargetMatch::BinPathLastComponent("rst2pseudoxml.py".to_string()),
    TargetMatch::BinPathLastComponent("rst2s5.py".to_string()),
    TargetMatch::BinPathLastComponent("rst2xetex.py".to_string()),
    TargetMatch::BinPathLastComponent("rst2xml.py".to_string()),
    TargetMatch::BinPathLastComponent("rstpep2html.py".to_string()),
    TargetMatch::BinPathLastComponent("run_x_platform_fuzz_corpus".to_string()),
    TargetMatch::BinPathLastComponent("samp_hub".to_string()),
    TargetMatch::BinPathLastComponent("sclient".to_string()),
    TargetMatch::BinPathLastComponent("scrapy".to_string()),
    TargetMatch::BinPathLastComponent("sed".to_string()),
    TargetMatch::BinPathLastComponent("send2trash".to_string()),
    TargetMatch::BinPathLastComponent("sha256_profile".to_string()),
    TargetMatch::BinPathLastComponent("showtable".to_string()),
    TargetMatch::BinPathLastComponent("sim_client".to_string()),
    TargetMatch::BinPathLastComponent("sip-build".to_string()),
    TargetMatch::BinPathLastComponent("sip-distinfo".to_string()),
    TargetMatch::BinPathLastComponent("sip-install".to_string()),
    TargetMatch::BinPathLastComponent("sip-module".to_string()),
    TargetMatch::BinPathLastComponent("sip-sdist".to_string()),
    TargetMatch::BinPathLastComponent("sip-wheel".to_string()),
    TargetMatch::BinPathLastComponent("skivi".to_string()),
    TargetMatch::BinPathLastComponent("sleep".to_string()),
    TargetMatch::BinPathLastComponent("slencheck".to_string()),
    TargetMatch::BinPathLastComponent("slugify".to_string()),
    TargetMatch::BinPathLastComponent("smem".to_string()),
    TargetMatch::BinPathLastComponent("sphinx-apidoc".to_string()),
    TargetMatch::BinPathLastComponent("sphinx-autogen".to_string()),
    TargetMatch::BinPathLastComponent("sphinx-build".to_string()),
    TargetMatch::BinPathLastComponent("sphinx-quickstart".to_string()),
    TargetMatch::BinPathLastComponent("spyder".to_string()),
    TargetMatch::BinPathLastComponent("sqlite3_analyzer".to_string()),
    TargetMatch::BinPathLastComponent("streamlit".to_string()),
    TargetMatch::BinPathLastComponent("streamlit.cmd".to_string()),
    TargetMatch::BinPathLastComponent("stubgen".to_string()),
    TargetMatch::BinPathLastComponent("stubtest".to_string()),
    TargetMatch::BinPathLastComponent("symilar".to_string()),
    TargetMatch::BinPathLastComponent("syncqt.pl".to_string()),
    TargetMatch::BinPathLastComponent("tabs".to_string()),
    TargetMatch::BinPathLastComponent("tabulate".to_string()),
    TargetMatch::BinPathLastComponent("tail".to_string()),
    TargetMatch::BinPathLastComponent("tclsh".to_string()),
    TargetMatch::BinPathLastComponent("tclsh8.6".to_string()),
    TargetMatch::BinPathLastComponent("tee".to_string()),
    TargetMatch::BinPathLastComponent("testsolv".to_string()),
    TargetMatch::BinPathLastComponent("tic".to_string()),
    TargetMatch::BinPathLastComponent("tiff2bw".to_string()),
    TargetMatch::BinPathLastComponent("tiff2fsspec".to_string()),
    TargetMatch::BinPathLastComponent("tiff2pdf".to_string()),
    TargetMatch::BinPathLastComponent("tiff2ps".to_string()),
    TargetMatch::BinPathLastComponent("tiff2rgba".to_string()),
    TargetMatch::BinPathLastComponent("tiffcmp".to_string()),
    TargetMatch::BinPathLastComponent("tiffcomment".to_string()),
    TargetMatch::BinPathLastComponent("tiffcp".to_string()),
    TargetMatch::BinPathLastComponent("tiffcrop".to_string()),
    TargetMatch::BinPathLastComponent("tiffdither".to_string()),
    TargetMatch::BinPathLastComponent("tiffdump".to_string()),
    TargetMatch::BinPathLastComponent("tifffile".to_string()),
    TargetMatch::BinPathLastComponent("tiffinfo".to_string()),
    TargetMatch::BinPathLastComponent("tiffmedian".to_string()),
    TargetMatch::BinPathLastComponent("tiffset".to_string()),
    TargetMatch::BinPathLastComponent("tiffsplit".to_string()),
    TargetMatch::BinPathLastComponent("tificc".to_string()),
    TargetMatch::BinPathLastComponent("timezone-dump".to_string()),
    TargetMatch::BinPathLastComponent("tkconch".to_string()),
    TargetMatch::BinPathLastComponent("tldextract".to_string()),
    TargetMatch::BinPathLastComponent("toe".to_string()),
    TargetMatch::BinPathLastComponent("tput".to_string()),
    TargetMatch::BinPathLastComponent("tqdm".to_string()),
    TargetMatch::BinPathLastComponent("tracegen".to_string()),
    TargetMatch::BinPathLastComponent("transicc".to_string()),
    TargetMatch::BinPathLastComponent("trial".to_string()),
    TargetMatch::BinPathLastComponent("tset".to_string()),
    TargetMatch::BinPathLastComponent("ttx".to_string()),
    TargetMatch::BinPathLastComponent("twist".to_string()),
    TargetMatch::BinPathLastComponent("twistd".to_string()),
    TargetMatch::BinPathLastComponent("uic".to_string()),
    TargetMatch::BinPathLastComponent("uname".to_string()),
    TargetMatch::BinPathLastComponent("undill".to_string()),
    TargetMatch::BinPathLastComponent("unidecode".to_string()),
    TargetMatch::BinPathLastComponent("unlz4".to_string()),
    TargetMatch::BinPathLastComponent("unlzma".to_string()),
    TargetMatch::BinPathLastComponent("unxz".to_string()),
    TargetMatch::BinPathLastComponent("unzstd".to_string()),
    TargetMatch::BinPathLastComponent("uuclient".to_string()),
    TargetMatch::BinPathLastComponent("validate-docstrings".to_string()),
    TargetMatch::BinPathLastComponent("volint".to_string()),
    TargetMatch::BinPathLastComponent("watchmedo".to_string()),
    TargetMatch::BinPathLastComponent("wcslint".to_string()),
    TargetMatch::BinPathLastComponent("wheel".to_string()),
    TargetMatch::BinPathLastComponent("wish".to_string()),
    TargetMatch::BinPathLastComponent("wish8.6".to_string()),
    TargetMatch::BinPathLastComponent("wrjpgcom".to_string()),
    TargetMatch::BinPathLastComponent("wsdump".to_string()),
    TargetMatch::BinPathLastComponent("x86_64-conda_cos7-linux-gnu-ld".to_string()),
    TargetMatch::BinPathLastComponent("x86_64-conda-linux-gnu-ld".to_string()),
    TargetMatch::BinPathLastComponent("xkbcli".to_string()),
    TargetMatch::BinPathLastComponent("xml2-config".to_string()),
    TargetMatch::BinPathLastComponent("xml2-config.bak".to_string()),
    TargetMatch::BinPathLastComponent("xmlcatalog".to_string()),
    TargetMatch::BinPathLastComponent("xmllint".to_string()),
    TargetMatch::BinPathLastComponent("xmlpatterns".to_string()),
    TargetMatch::BinPathLastComponent("xmlpatternsvalidator".to_string()),
    TargetMatch::BinPathLastComponent("xmlwf".to_string()),
    TargetMatch::BinPathLastComponent("xslt-config".to_string()),
    TargetMatch::BinPathLastComponent("xsltproc".to_string()),
    TargetMatch::BinPathLastComponent("xz".to_string()),
    TargetMatch::BinPathLastComponent("xzcat".to_string()),
    TargetMatch::BinPathLastComponent("xzcmp".to_string()),
    TargetMatch::BinPathLastComponent("xzdec".to_string()),
    TargetMatch::BinPathLastComponent("xzdiff".to_string()),
    TargetMatch::BinPathLastComponent("xzegrep".to_string()),
    TargetMatch::BinPathLastComponent("xzfgrep".to_string()),
    TargetMatch::BinPathLastComponent("xzgrep".to_string()),
    TargetMatch::BinPathLastComponent("xzless".to_string()),
    TargetMatch::BinPathLastComponent("xzmore".to_string()),
    TargetMatch::BinPathLastComponent("yapf".to_string()),
    TargetMatch::BinPathLastComponent("yapf-diff".to_string()),
    TargetMatch::BinPathLastComponent("zfp".to_string()),
    TargetMatch::BinPathLastComponent("zlib_decompress".to_string()),
    TargetMatch::BinPathLastComponent("zopfli".to_string()),
    TargetMatch::BinPathLastComponent("zopflipng".to_string()),
    TargetMatch::BinPathLastComponent("zstd".to_string()),
    TargetMatch::BinPathLastComponent("zstdcat".to_string()),
    TargetMatch::BinPathLastComponent("zstdgrep".to_string()),
    TargetMatch::BinPathLastComponent("zstdless".to_string()),
    TargetMatch::BinPathLastComponent("zstdmt".to_string()),
    ].to_vec();

pub static ref TARGETS: Vec<Target> = [
    Target::new(TargetMatch::CommandContains(CommandContainsStruct {
        process_name: Some("java".to_string()),
        command_content: "uk.ac.babraham.FastQC.FastQCApplication".to_string()
    }))
    .set_display_name(DisplayName::Name("fastqc".to_string()))
    .set_merge_with_parents(true)
    .set_force_ancestor_to_match(false),

    Target::new(TargetMatch::ProcessName("STAR".to_string())),
    // bowtie section
    Target::new(TargetMatch::ProcessName("bowtie2".to_string())),
    Target::new(TargetMatch::ProcessName("bowtie2-build-s".to_string())),
    Target::new(TargetMatch::ProcessName("bowtie2-align-s".to_string())),
    Target::new(TargetMatch::CommandContains(CommandContainsStruct {
        process_name: Some("bowtie2-build-s".to_string()),
        command_content: "/opt/conda/bin/bowtie2-build-s".to_string()
    }))
    .set_display_name(DisplayName::Name("bowtie2-build-s (Conda)".to_string())),
    Target::new(TargetMatch::CommandContains(CommandContainsStruct {
        command_content: "/opt/conda/bin/bowtie2-build".to_string(),
        process_name: None,
    })).
    set_display_name(DisplayName::Name("bowtie2-build (Conda)".to_string())),
    Target::new(TargetMatch::ProcessName("bwa".to_string())),
    Target::new(TargetMatch::ProcessName("salmon".to_string())),
    Target::new(TargetMatch::ProcessName("hisat2".to_string())).set_display_name(DisplayName::Name("HISAT2".to_string())),
    Target::new(TargetMatch::ProcessName("hisat2-build".to_string())).set_display_name(DisplayName::Name("HISAT2_BUILD".to_string())),
    Target::new(TargetMatch::ProcessName("stringtie".to_string())),
    Target::new(TargetMatch::ProcessName("featureCounts".to_string())),
    Target::new(TargetMatch::ProcessName("HOMER".to_string())),
    Target::new(TargetMatch::ProcessName("samtools".to_string())),
    Target::new(TargetMatch::ProcessName("seasmoke".to_string())),
    Target::new(TargetMatch::ProcessName("alphafold".to_string())),
    Target::new(TargetMatch::ProcessName("bedtools".to_string())),
    Target::new(TargetMatch::ProcessName("deeptools".to_string())),
    Target::new(TargetMatch::ProcessName("macs3".to_string())),
    Target::new(TargetMatch::ProcessName("plotCoverage".to_string())),
    Target::new(TargetMatch::ProcessName("plotPCA".to_string())),
    Target::new(TargetMatch::ProcessName("plotFingerprint".to_string())),
    Target::new(TargetMatch::ProcessName("MACS33".to_string())),
    Target::new(TargetMatch::ProcessName("Genrich".to_string())),
    Target::new(TargetMatch::ProcessName("TopHat".to_string())),
    Target::new(TargetMatch::ProcessName("JAMM".to_string())),
    Target::new(TargetMatch::ProcessName("fastqc".to_string())),
    Target::new(TargetMatch::ShortLivedProcessExecutable(
        "fastqc".to_string()
    )),
    Target::new(TargetMatch::ProcessName("multiqc".to_string())),
    Target::new(TargetMatch::ProcessName("fastp".to_string())),
    Target::new(TargetMatch::ProcessName("PEAR".to_string())),
    Target::new(TargetMatch::ProcessName("Trimmomatic".to_string())),
    Target::new(TargetMatch::ProcessName("sra-toolkit".to_string())),
    Target::new(TargetMatch::ProcessName("Picard".to_string())),
    Target::new(TargetMatch::ProcessName("cutadapt".to_string())),
    Target::new(TargetMatch::ProcessName("cellranger".to_string())),
    Target::new(TargetMatch::ProcessName("STATsolo".to_string())),
    Target::new(TargetMatch::ProcessName("scTE".to_string())),
    Target::new(TargetMatch::ProcessName("scanpy".to_string())),
    Target::new(TargetMatch::ProcessName("Seurat".to_string())),
    Target::new(TargetMatch::ProcessName("LIGER".to_string())),
    Target::new(TargetMatch::ProcessName("SC3".to_string())),
    Target::new(TargetMatch::ProcessName("Louvain".to_string())),
    Target::new(TargetMatch::ProcessName("Leiden".to_string())),
    Target::new(TargetMatch::ProcessName("Garnett".to_string())),
    Target::new(TargetMatch::ProcessName("Monocle".to_string())),
    Target::new(TargetMatch::ProcessName("Harmony".to_string())),
    Target::new(TargetMatch::ProcessName("PAGA".to_string())),
    Target::new(TargetMatch::ProcessName("Palantir".to_string())),
    Target::new(TargetMatch::ProcessName("velocity".to_string())),
    Target::new(TargetMatch::ProcessName("CellPhoneDB".to_string())),
    Target::new(TargetMatch::ProcessName("CellChat".to_string())),
    Target::new(TargetMatch::ProcessName("NicheNet".to_string())),
    Target::new(TargetMatch::ProcessName("FIt-SNE".to_string())),
    Target::new(TargetMatch::ProcessName("umap".to_string())),
    Target::new(TargetMatch::ProcessName("bbmap".to_string())),
    Target::new(TargetMatch::ProcessName("cuffdiff".to_string())),
    Target::new(TargetMatch::ProcessName("RNA-SeQC".to_string())),
    Target::new(TargetMatch::ProcessName("RSeQC".to_string())),
    Target::new(TargetMatch::ProcessName("Trimgalore".to_string())),
    Target::new(TargetMatch::ProcessName("UCHIME".to_string())),
    Target::new(TargetMatch::ProcessName("Erange".to_string())),
    Target::new(TargetMatch::ProcessName("X-Mate".to_string())),
    Target::new(TargetMatch::ProcessName("SpliceSeq".to_string())),
    Target::new(TargetMatch::ProcessName("casper".to_string())),
    Target::new(TargetMatch::ProcessName("DESeq".to_string())),
    Target::new(TargetMatch::ProcessName("EdgeR".to_string())),
    Target::new(TargetMatch::ProcessName("bamSummary".to_string())),
    Target::new(TargetMatch::ProcessName("kallisto".to_string())),
    Target::new(TargetMatch::ProcessName("pairtools".to_string())),
    Target::new(TargetMatch::ProcessName("HiCExplorer".to_string())),
    Target::new(TargetMatch::ProcessName("GITAR".to_string())),
    Target::new(TargetMatch::ProcessName("TADbit".to_string())),
    Target::new(TargetMatch::ProcessName("Juicer".to_string())),
    Target::new(TargetMatch::ProcessName("HiC-Pro".to_string())),
    Target::new(TargetMatch::ProcessName("cooler".to_string())),
    Target::new(TargetMatch::ProcessName("cooltools".to_string())),
    Target::new(TargetMatch::ProcessName("runHiC".to_string())),
    Target::new(TargetMatch::ProcessName("HTSlib".to_string())),
    Target::new(TargetMatch::ProcessName("htslib".to_string())),
    Target::new(TargetMatch::ProcessName("zlib".to_string())),
    Target::new(TargetMatch::ProcessName("libbz2".to_string())),
    Target::new(TargetMatch::ProcessName("liblzma".to_string())),
    Target::new(TargetMatch::ProcessName("libcurl".to_string())),
    Target::new(TargetMatch::ProcessName("libdeflate".to_string())),
    Target::new(TargetMatch::ProcessName("ncurses".to_string())),
    Target::new(TargetMatch::ProcessName("pthread".to_string())),
    Target::new(TargetMatch::ProcessName("python".to_string()))
        .set_display_name(DisplayName::UseFirstArgumentBaseName()),
    Target::new(TargetMatch::ProcessName("python2".to_string()))
        .set_display_name(DisplayName::UseFirstArgumentBaseName()),
    Target::new(TargetMatch::ProcessName("python3".to_string()))
        .set_display_name(DisplayName::UseFirstArgumentBaseName()),
    Target::new(TargetMatch::ProcessName("perl".to_string()))
        .set_display_name(DisplayName::UseFirstArgumentBaseName()),
    Target::new(TargetMatch::BinPathStartsWith("/opt/conda/bin".to_string()))
        .set_filter_out(Some(OPT_CONDA_BIN_EXCEPTIONS.to_vec())),
]
.to_vec();

}
